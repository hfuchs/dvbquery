#!/usr/bin/perl -w
# 2010-02-03, Created by H Fuchs <hagen.fuchs@physik.tu-dresden.de>
# The GPL applies; if this script breaks something, don't come running to me!
#
# Witz: Wenn die Anfrage nicht länger als 10 Tage her ist, nimm die Daten
# einfach aus dem Cache.  Noch cooler: Liefere immer aus dem Cache, aber
# starte einen thread, der nochmal kontrolliert.

use strict;
use utf8;
use LWP::Simple;   # TODO Either LWP *or* Mech (more expensive)!
use WWW::Mechanize 1.5;
use HTML::TreeBuilder;
use Encode;
use Getopt::Long;    # Able to take the same option multiple times.
use CGI qw/unescapeHTML/;
use feature qw/say switch/;
use URI;
use Try::Tiny;
use File::Temp qw/tempfile/;
# TODO 'use'ing the 'open' pragma with ':locale' right after strict,
# Perl makes 2000+ calls to decode_xs/encode_xs just in BEGIN{}!
# Putting it at the end, solves that.  Using ':utf8' also works.
use open ':locale';  # Governs STD*, open(), readpipe(), ...
#use Data::Dumper;

# --- Globals
# TODO Read from config file
my $server_url = "http://widgets.vvo-online.de/abfahrtsmonitor/";
my $ort        = "Dresden";
my %config     = (  # TODO Put all config here.
    'want_to_chat' => 1,
    'debug'        => 0,
    # TODO Define default output-format here: Markdown or "chat".
);


# --- Main

# Command-line parsing
my ($from, $to, $time, @complex, $help);
my $pdf = 1;
GetOptions(
    'from:s'    => \$from,  # TODO Allow eg. 'Dresden, Hauptbahnhof'.
    'to:s'      => \$to,
    'at:s'      => \$time,  # TODO Change to departure, arrival
    'complex:s' => \@complex,
    'help'      => \$help,
    'pdf'       => \$pdf,
    'debug'     => \$config{debug},
);

display_help() if ($help);

# TODO No args?  Ask.  Better still, start interactive prompt.
# TODO Support user-definable abbreviations (eg 'NÖ', 'HB' etc).
if (@complex) {
    display_itinerary(sanitize_input(@complex));
} elsif ($from = sanitize_input($from)) {
    if ($to = sanitize_input($to)) {
        display_connections($from, $to); # TODO Pass time as well.
    } else {
        display_departure($from);
    }
} else {
    chat("Would it bother you very much telling me what it is you want?");
    display_help();
}


# --- Subroutines
sub display_itinerary {
    D();
    my (@plans) = @_;

    #chat("What a journey!  Let's see...");
    # No chatting, this is serious business.
    # TODO pdf creation is useless - I'm creating multiple documents
    # instead of just one.
    $config{'want_to_chat'} = 0;
    $pdf = '';

    foreach my $plan (@plans) {
        my @itinerary = parse_complex_plan($plan); # Array of hash refs

        foreach my $trip (@itinerary) {
            $time = $trip->{'time'} if $trip->{'time'};
            $from = $trip->{'from'};
            $to   = $trip->{'to'};
            display_connections($from, $to);
        }
    }
}

sub parse_complex_plan {
    D();
    # Parses strings like
    # 'hauptbahnhof@9:00,albertplatz;albertplatz@14:00,postplatz'
    # to produce an array like this (simple version):
    # @trips = (
    #    {
    #      'from' =>
    #      'to'   =>
    #      'time' => [time_string, eg: 20:00],
    #    },
    #    { 'from' => ...
    # );
    #
    # TODO Later (more advanced): Parse
    # 'Dresden, hauptbahnhof@9:00;Weinböhla,weinböhla HP' and
    # 'From: haupbahnhof@9:00 TO: albertplatz to: fiedlerstraße, 9:00' or even
    # 'Von: hauptbahnhof, 9:00 nach: albertplatz von: fiedlerstraße, 17.00
    #  nach hauptbahnhof'!
    # TODO Define a test function, which one could paste into the terminal to
    # exercise all program paths.  Use Test::More.
    my @records = split /;/, shift;
    my @trips;  # The complex datatype described above.

    # TODO Use a string parser (String::RexxParse, Parse::RecDescent)?
    foreach my $trip (@records) {
        my ($from, $dep_time, $to, $arr_time);
        if ($trip =~ m/,/) {
            my ($from_field, $to_field) = split /,/, $trip;
            ($from, $dep_time)          = split /@/, $from_field;
            ($to, $arr_time)            = split /@/, $to_field;
        } else {
            #($to, $arr_time) = split /@/, $trip;
            say "I don't support leaving out the 'from' field, yet.  Dying.";
            exit -1;
        }
        if ($arr_time) {
            say "Not supporting arrival time specs yet.  Dying.";
            exit -1;
        }
        if (not defined $dep_time) {
            say "No departure time given.  Dying.";
            exit -1;
        }
        push @trips, { 'from' => $from, 'to' => $to, 'time' => $dep_time };
    }

    return @trips;
}

sub display_connections {
    D();
    # TODO Direct output to Markdown would be nice.
    my ($from, $to) = @_;

    chat("Travelling from '" . $from . "' to '" . $to . "', I see.\n");

    if (check_station_uniqueness($from, $to)) {

        # Now on to the real connection data.
        my $result = parse_connection_data(fetch_connection_data($from, $to));

        if (scalar(@$result) > 0) {
            # TODO witty chat here
            foreach my $ride (@$result) {
                foreach my $stop (@$ride) {
                    print $stop->{'time'}.' '.$stop->{'aban'}.' '.$stop->{'station'};
                    print " ($stop->{'line'})" if ($stop->{'line'});
                    if ($stop->{'note'}) {
                        print "\n\t" . $stop->{'note'};
                    }
                    print "\n";
                }
                print "\n";
            }
            create_pdf_file($result) if ($pdf);
        } else {
            say "That's odd ... no connection results?";
        }
    }
    return 1;
}

sub parse_connection_data {
    D();
    # Note: You'll have to verify for yourself, whether all the fields are
    # actually defined.  TODO Or should I do this?
    my $tree = HTML::TreeBuilder->new_from_content(shift);
    my $result;

    # Find all "full trip" tables and parse each one.
    my @rides = $tree->look_down( '_tag' , 'table', 'class', 'full trip' );
    my $i = 0;  # Index of rides, to be used in $result
    foreach my $ride (@rides) {
        my @stops = $ride->look_down( '_tag', 'tr' );
        my $k = 0;  # Index of stops in each ride.
        foreach my $stop (@stops) {
            # Remove elements that add no information.
            my @bastards = $stop->look_down('_tag', 'ul', 'class',
                'linkliste');
            push @bastards, $stop->look_down('_tag', 'img');
            $_->delete foreach (@bastards);

            # Find the individual description elements.  Entries:
            #  - time
            #  - "ab"/"an"
            #  - station
            #  - additional information (Those are often quite tricky!)
            my @desc = $stop->look_down( '_tag', 'td' );
            #say Dumper($desc[0]);
            #say Dumper($desc[1]);
            #say Dumper($desc[2]);
            $result->[$i]->[$k]->{'time'}    = $desc[0]->as_text;
            $result->[$i]->[$k]->{'aban'}    = $desc[1]->as_text;  # TODO Key name?
            $result->[$i]->[$k]->{'station'} = $desc[2]->as_text;

            # Parsing the badly-formatted info-string $desc[4]
            # TODO Linienänderungen!  ul class=changelist
            # TODO Überfahrhilfe!  </br>Überfahrhilfe
            # TODO Format of "Fußgänger"-entries is not quite cute.
            foreach my $info ($desc[4]->look_down('_tag','td')) {
                if (my $bold = $info->look_down('_tag','b')) {
                    my $line = $bold->as_text;
                    $line =~ s/^[^0-9]*([0-9]*)[^0-9]*$/$1/;
                    $result->[$i]->[$k]->{'line'} = $line;
                    $bold->delete;
                }
                $result->[$i]->[$k]->{'note'} = $info->as_text;
            }
            $k++;
        }
        $i++;
    }
    $tree->delete;

    return $result;
}

sub fetch_connection_data {
    D();
    # TODO $time still global
    my ($from, $to) = @_;

    # See HTML::Element for operations on the tree, HTML::TreeBuilder for
    # parsing information and WWW::Mechanize for general documentation.
    my $mech = new WWW::Mechanize;

    # TODO Zum Kotzen.
    my ($sec,$min,$hour,$day,$month,$year,,,) = localtime(time);
    $year = $year+1900;
    $time = "$hour:$min" unless ($time);

    $mech->get('http://dvb.de'); # TODO variable?
    my $page = $mech->submit_form(
        'with_fields' => {
            'vaform[datum]'     =>  "$day." . ++$month . ".$year",
            'vaform[startname]' =>  $from,
            'vaform[startort]'  =>  'Dresden',
            'vaform[zeit]'      =>  $time,
            'vaform[zeittyp]'   =>  'dep',
            'vaform[zielname]'  =>  $to,
            'vaform[zielort]'   =>  'Dresden',
        }
    );

    if ($mech->success) {
        D("Mech seems succesful");
        return decode_utf8 $page->content;
    } else {
        # TODO You should probably die or carp or something.
        say STDERR "Error: ", $mech->response->status_line;
    }
}

sub display_departure {
    D();
    my $station = shift;

    chat("So, you want to know everything about station '$station'?");

    if (check_station_uniqueness($station)) {

        # Now on to the real departure data.
        my $result = parse_departure_data(fetch_departure_data($station));

        if (scalar(@$result) > 0) {
            chat("Holmes!  Coaches leave in:");
            foreach my $entry (@$result) {
                print "  ". $entry->{'minutes'} . "\tminutes to " .
                $entry->{'destination'} . " (" .
                $entry->{'number'} . ")." . "\n";
            }
        } else {
            chat("My!  Nothing leaves from _there_.");
        }
    } # No else required here, right?

    return 1;
}

sub parse_departure_data {
    D();
    my $string = shift;
    my $result;

    if ($string =~ s/^\[(.*)\]$/$1/) {
        my $i = 0;
        while ($string =~ s/^,?\["(.*?)","(.*?)","(.*?)"\]//) {
            $result->[$i]->{'number'}      = $1;
            $result->[$i]->{'destination'} = $2;
            $result->[$i++]->{'minutes'}   = $3;
        }
        return $result
    } else {
        die "Unparseable."; # TODO: exception handling
    }
}

sub fetch_departure_data {
    D();
    # TODO fetch_*() functions have identical try-catch blocks.
    my $station = shift;

    # TODO Log URL.
    my $url = URI->new($server_url .
        "Abfahrten.do?ort=$ort&hst=$station&vz=20:00");
        # TODO Not sure about these.
        # +"&vm="+preferenceForKey('vmPrefChecked')
        # +"&lim="+preferenceForKey('listitemsPrefChecked'));
    try {
        my $page = get($url) or die "Network";
        $page = decode_utf8 CGI::unescapeHTML($page) or die "Fatal";
        return $page;
    } catch {
        when (/Network/) { die "Sorry, the DVB server is down.\n" }
        default          { die "Fatal" }
    };
}

sub parse_station_data {
    D();
    my $string = shift;
    my $result;

    if ($string =~ s/^\[(.*)\]$/$1/) { # Removing outmost brackets.
        my $i = 0;
        while ($string =~ s/^,?\[\["(.*?)"\]\],\[\[(.*?)\]\]//) {
            $result->[$i]->{'ort'}        = $1;
            my @stations                  = split(/\],\[/, $2);
            map { s/^"(.*?)".*$/$1/ } @stations;
            $result->[$i++]->{'stations'} = \@stations;
        }
        return $result
    } else {
        die "Unparseable.";
    }
}

sub fetch_station_data {
    D();
    my $station = shift;

    my $url  = URI->new($server_url . "Haltestelle.do?ort=$ort&hst=$station");
    try {
        my $page = get($url) or die "Network";
        $page = decode_utf8 CGI::unescapeHTML($page) or die "Fatal";
        return $page;
    } catch {
        when (/Network/) { die "Sorry, the DVB server is down.\n" }
        default          { die "Fatal" }
    };
}

sub check_station_uniqueness {
    D();
    # TODO Caching!  Learning!
    # TODO Inconsistent user interface, chat()s all over the place.
    my @stations = @_;

    foreach my $station (@stations) {
        my $result = parse_station_data(fetch_station_data($station));

        if (scalar(@{$result->[0]->{'stations'}}) > 1) {
            chat("But multiple stations match your request (silly bugger!):");
            say  "  $_" foreach (@{$result->[0]->{'stations'}});
            chat("Do try to be more specific next time, will you?");
            return '';
        }
    }

    return 1;
}

sub sanitize_input {
    D();
    # TODO Why the distinction between array and scalar?
    # TODO Is that all as regards sanitization?
    D(@_);
    if (scalar(@_) > 1) {
        return map { $_ = decode_utf8($_); } @_;
    } else {
        return decode_utf8(shift);
    }
}

sub remove_ws {
    D();
    my $text = shift;
    $text =~ s/^\s*(.*?)\s*$/$1/;
    return $text;
}

# TODO Make this compatible with display_itinerary().  Perhaps
# introducing push_pdf() and calling create_pdf_file() at the END would
# be a clever solution.
sub create_pdf_file {
    D();
    my $rides = shift;
    my ($tmp, $tmp_name) = tempfile();

    try {
        chat("I'll try to create a pdf, too.");

        say {$tmp} encode_utf8("dvb. '$from' - '$to'\n"."-"x70);

        # TODO Code duplication.
        foreach my $ride (@$rides) {
            foreach my $stop (@$ride) {
                my $out = "    $stop->{'time'}";
                $out .= " $stop->{'aban'} $stop->{'station'}";
                $out .= " ($stop->{'line'})" if ($stop->{'line'});
                $out .= "\n       $stop->{'note'}" if ($stop->{'note'});
                $out .= "\n";
                print {$tmp} encode_utf8($out);
            }
            print {$tmp} "\n";
        }
        close $tmp or die;

        system("markdown2pdf $tmp_name") == 0
            or die;
    } catch {
        chat("Actually, that didn't work out.  Never mind.");
    } finally {
        unlink $tmp_name;
    };
}

sub display_help {
    D();
    # TODO Use POD.
    # TODO List of abbreviations.
    # TODO debug flag.
    say 'dvb - DVB query 0.4 by HF <hagen.fuchs@physik.tu-dresden.de>';
    say "Usage:";
    say "  Display station info   -    dvb -f [station]";
    say "  Route planning         -    dvb -f [from] -t [to] [-a [at]]";
    say "  Complex route planning -    dvb -c [route specification]";
    say "\nComplex Route Specification:";
    say "  [from\@time,to;from\@time,to;...]";
    say "\nExamples:";
    say "  dvb -f albertplatz -t 'plauen nöthnitzer straße' -a '19:00'";
    say "  dvb -c 'albertplatz\@9:00,hauptbahnhof;plauen nöthnitzer straße\@18:00,albertplatz'";
    #say "(Licence: GPL)";
    exit -1;
}

sub D {
    return unless ($config{debug});

    # 2011-03-27, Straight from the docs.
    my ($package, $filename, $line, $subroutine, $hasargs,
    $wantarray, $evaltext, $is_require, $hints, $bitmask, $hinthash)
    = caller(1);

    say STDERR encode_utf8 "DEBUG ($subroutine) ", scalar(@_)>0 ? @_ : "called.";
}

sub chat {
    # TODO More variety!  Say sth. different!
    say @_ if ($config{'want_to_chat'});
    return;
}

