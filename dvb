#!/usr/bin/perl -w
# 2010-01-23, Created by H Fuchs <hagen.fuchs@physik.tu-dresden.de>
# 2010-02-03, The search for the source of 'Parsing of undecoded UTF-8 will
# give garbage' ends today.  WWW::Mechanize 1.50 handles it right and passing
# decoded_content to the TreeBuilder works now.

# TODO Take a look at WWW::Mechanize::TreeBuilder

# --- Preliminiaries
use strict;
use feature qw/say/;
use Getopt::Std;
use WWW::Mechanize 1.5;
use HTML::TreeBuilder;
use Encode;

my $url = 'http://dvb.de';

# --- Option Parsing
my %args;
getopts("f:t:", \%args);
my $from = $args{'f'};
my $to   = $args{'t'};

unless ($from and $to) {
    say "You didn't specify destinations correctly!";
    exit -1;
}

# See HTML::Element for operations on the tree such as dump(),
# HTML::TreeBuilder for parsing information and WWW::Mechanize for
# general documentation.
my $mech = new WWW::Mechanize;

# TODO Zum Kotzen.
my ($sec,$min,$hour,$day,$month,$year,,,) = localtime(time);
$year = $year+1900;

$mech->get($url);
my $page = $mech->submit_form(
    'with_fields' => {
        'vaform[datum]'     =>  "$day." . ++$month . ".$year",
        'vaform[startname]' =>  $from,
        'vaform[startort]'  =>  'Dresden',
        'vaform[zeit]'      =>  "$hour:$min",
        'vaform[zeittyp]'   =>  'dep',
        'vaform[zielname]'  =>  $to,
        'vaform[zielort]'   =>  'Dresden',
    }
);

if ($mech->success) {
    # TODO Why does the TreeBuilder still need UTF-8 decoding?
    my $tree = HTML::TreeBuilder->new_from_content(decode_utf8 $page->content);

    # Find all "full trip" tables and parse each one.
    say "-"x70;
    my @rides = $tree->look_down( '_tag' , 'table', 'class', 'full trip' );
    foreach my $ride (@rides) {
        my @stops = $ride->look_down( '_tag', 'tr' );
        foreach my $stop (@stops) {
            # Remove elements that add no information.
            my @bastards = $stop->look_down('_tag', 'ul', 'class', 'linkliste');
            push @bastards, $stop->look_down('_tag', 'img');
            $_->delete foreach (@bastards);

            # Find the individual description elements.  Entries:
            #  - time
            #  - "ab"/"an"
            #  - station
            #  - additional information
            my @desc = $stop->look_down( '_tag', 'td' );
            my $tmp = $desc[0]->as_text.' '.$desc[1]->as_text.' '.$desc[2]->as_text;
            print encode_utf8 $tmp;

            # Parsing the badly-formatted info-string
            # TODO LinienÃ¤nderungen!  ul class=changelist
            foreach my $info ($desc[4]->look_down('_tag','td')) {
                if (my $bold =  $info->look_down('_tag','b')) {
                    my $line = $bold->as_text;
                    $line =~ s/^[^0-9]*([0-9]*)[^0-9]*$/$1/;
                    print " ($line)";
                    $bold->delete;
                }
                if (my $note = $info->as_text) {
                    print "\n\t" . encode_utf8 $note;
                }
            }
            print "\n";
        }
        say "-"x70;
    }
    $tree->delete;
} else {
    say STDERR "Error: ", $mech->response->status_line;
}

